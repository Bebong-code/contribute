<theme-button>
  <button class='theme-toggle' aria-label='Toggle Theme'>
    <span class='theme-option auto'>
      <span class='theme-icon'>üåì</span> Auto
    </span>
    <span class='theme-option light'>
      <span class='theme-icon'>‚òÄÔ∏è</span> Light
    </span>
    <span class='theme-option dark'>
      <span class='theme-icon'>üåô</span> Dark
    </span>
  </button>
</theme-button>

<script>
  import type { ThemeChangeEvent, Theme } from '../theme';

  const theme = window.theme;
  class ThemeButton extends HTMLElement {
    constructor() {
      super();
      const button = this.querySelector('.theme-toggle');
      if (!button) return;

      button.addEventListener('click', () => {
        const currentTheme = theme.getTheme();
        let newTheme: Theme;
        if (currentTheme === 'auto') newTheme = 'light';
        else if (currentTheme === 'light') newTheme = 'dark';
        else newTheme = 'auto';

        theme.setTheme(newTheme);
        this.updateSelectedTheme(newTheme);
      });

      window.addEventListener('theme-changed', (event: ThemeChangeEvent) => {
        this.updateSelectedTheme(event.detail.theme);
      });

      this.updateSelectedTheme(theme.getTheme());
    }

    updateSelectedTheme(newTheme: Theme) {
      const button = this.querySelector('.theme-toggle') as HTMLButtonElement;
      button.value = newTheme;
      button.classList.remove('auto-theme', 'light-theme', 'dark-theme');
      button.classList.add(`${newTheme}-theme`);
    }
  }
  customElements.define('theme-button', ThemeButton);
</script>

<style>
  .theme-toggle {
    background-color: var(--tertiary-background);
    border: none;
    cursor: pointer;
    padding: 5px 10px;
    border-radius: 15px;
    display: flex;
    align-items: center;
  }

  .theme-option {
    display: none;
  }

  .auto-theme .theme-option.auto,
  .light-theme .theme-option.light,
  .dark-theme .theme-option.dark {
    display: flex;
    align-items: center;
  }

  .theme-icon {
    margin-right: 5px;
  }
</style>
